From: http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/gnome-base/gnome-shell/files/

  * use config.js (and AC_SUBST HAVE_NETWORKMANAGER appropriately);
  * take care to not import ui.status.network if nm is disabled;
  * do not try to reassign to const variables;
  * no point really in fiddling with the list of installed js files;
  * don't build shell-mobile-providers if nm is disabled;
  * use "networkmanager" instead of "network_manager" because THE
    BIKESHED SHOULD BE BLUE, also because the upstream package name is
    NetworkManager, not Network_Manager. 
--- a/js/Makefile.am
+++ b/js/Makefile.am
@@ -8,6 +8,7 @@
 	sed -e "s|[@]PACKAGE_NAME@|$(PACKAGE_NAME)|g" \
 	    -e "s|[@]PACKAGE_VERSION@|$(PACKAGE_VERSION)|g" \
 	    -e "s|[@]HAVE_BLUETOOTH@|$(HAVE_BLUETOOTH)|g" \
+	    -e "s|[@]HAVE_NETWORKMANAGER@|$(HAVE_NETWORKMANAGER)|g" \
 	    -e "s|[@]GETTEXT_PACKAGE@|$(GETTEXT_PACKAGE)|g" \
 	    -e "s|[@]datadir@|$(datadir)|g" \
 	    -e "s|[@]libexecdir@|$(libexecdir)|g" \
--- a/js/misc/config.js.in
+++ b/js/misc/config.js.in
@@ -6,6 +6,8 @@
 const PACKAGE_VERSION = '@PACKAGE_VERSION@';
 /* 1 if gnome-bluetooth is available, 0 otherwise */
 const HAVE_BLUETOOTH = @HAVE_BLUETOOTH@;
+/* 1 if networkmanager is available, 0 otherwise */
+const HAVE_NETWORKMANAGER = @HAVE_NETWORKMANAGER@;
 /* gettext package */
 const GETTEXT_PACKAGE = '@GETTEXT_PACKAGE@';
 /* locale dir */
--- a/js/ui/panel.js
+++ b/js/ui/panel.js
@@ -811,7 +811,9 @@
         this._indicators = new St.BoxLayout({ style_class: 'panel-status-indicators-box' });
         this.actor.add_child(this._indicators);
 
-        this._network = new imports.ui.status.network.NMApplet();
+        if (Config.HAVE_NETWORKMANAGER) {
+          this._network = new imports.ui.status.network.NMApplet();
+        }
         if (Config.HAVE_BLUETOOTH) {
             this._bluetooth = new imports.ui.status.bluetooth.Indicator();
         } else {
--- a/js/ui/sessionMode.js
+++ b/js/ui/sessionMode.js
@@ -10,6 +10,8 @@
 const Main = imports.ui.main;
 const Params = imports.misc.params;
 
+const Config = imports.misc.config;
+
 const DEFAULT_MODE = 'restrictive';
 
 const _modes = {
@@ -92,7 +94,10 @@
         isLocked: false,
         isPrimary: true,
         unlockDialog: imports.ui.unlockDialog.UnlockDialog,
-        components: ['networkAgent', 'polkitAgent', 'telepathyClient',
+        components: Config.HAVE_NETWORKMANAGER ?
+          ['networkAgent', 'polkitAgent', 'telepathyClient',
+                     'keyring', 'autorunManager', 'automountManager'] :
+          ['polkitAgent', 'telepathyClient',
                      'keyring', 'autorunManager', 'automountManager'],
         panel: {
             left: ['activities', 'appMenu'],
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -103,7 +103,6 @@
 	shell-invert-lightness-effect.h	\
 	shell-keybinding-modes.h	\
 	shell-mount-operation.h		\
-	shell-network-agent.h		\
 	shell-perf-log.h		\
 	shell-screenshot.h		\
 	shell-slicer.h			\
@@ -140,7 +139,6 @@
 	shell-menu-tracker.c		\
 	shell-menu-tracker.h		\
 	shell-mount-operation.c		\
-	shell-network-agent.c		\
 	shell-perf-log.c		\
 	shell-polkit-authentication-agent.h	\
 	shell-polkit-authentication-agent.c	\
@@ -175,6 +173,10 @@
 
 libgnome_shell_la_SOURCES = $(libgnome_shell_sources)
 
+if HAVE_NETWORKMANAGER
+libgnome_shell_la_SOURCES +=  shell-network-agent.c
+endif
+
 libgnome_shell_la_gir_sources = \
 	$(filter-out %-private.h $(shell_private_sources), $(shell_public_headers_h) $(libgnome_shell_base_la_SOURCES) $(libgnome_shell_sources))
 
@@ -331,7 +333,10 @@
 CLEANFILES += ShellMenu-0.1.gir
 
 Shell-0.1.gir: gnome-shell St-1.0.gir ShellMenu-0.1.gir
-Shell_0_1_gir_INCLUDES = Clutter-1.0 ClutterX11-1.0 Meta-3.0 TelepathyGLib-0.12 Soup-2.4 GMenu-3.0 NetworkManager-1.0 NMClient-1.0
+Shell_0_1_gir_INCLUDES = Clutter-1.0 ClutterX11-1.0 Meta-3.0 TelepathyGLib-0.12 Soup-2.4 GMenu-3.0
+if HAVE_NETWORKMANAGER
+Shell_0_1_gir_INCLUDES += NetworkManager-1.0 NMClient-1.0
+endif
 Shell_0_1_gir_CFLAGS = $(libgnome_shell_la_CPPFLAGS) -I $(srcdir)
 # Hack! we use PROGRAM instead of LIBS so that the soname is not included
 # in the typelib. This way the symbols will be resolved with the libgnome-shell
--- a/configure.ac
+++ b/configure.ac
@@ -91,8 +91,6 @@
             libcanberra libcanberra-gtk3
             telepathy-glib >= $TELEPATHY_GLIB_MIN_VERSION
             polkit-agent-1 >= $POLKIT_MIN_VERSION
-            libnm-glib libnm-util >= $NETWORKMANAGER_MIN_VERSION
-            libnm-gtk >= $NETWORKMANAGER_MIN_VERSION
             libsecret-unstable gcr-base-3 >= $GCR_MIN_VERSION"
 
 PKG_CHECK_MODULES(GNOME_SHELL, $SHARED_PCS)
@@ -162,6 +160,37 @@
             [Define if _NL_TIME_FIRST_WEEKDAY is available])
 fi
 
+AC_ARG_ENABLE(networkmanager,
+             AS_HELP_STRING([--disable-networkmanager],
+                            [disable NetworkManager support  @<:@default=auto@:>@]),,
+              [enable_networkmanager=auto])
+
+if test "x$enable_networkmanager" != "xno"; then
+   PKG_CHECK_MODULES(NETWORKMANAGER,
+                     [libnm-glib 
+                     libnm-util >= $NETWORKMANAGER_MIN_VERSION
+                     libnm-gtk >= $NETWORKMANAGER_MIN_VERSION],
+                     [have_networkmanager=yes],
+                     [have_networkmanager=no])
+
+   GNOME_SHELL_CFLAGS="$GNOME_SHELL_CFLAGS $NETWORKMANAGER_CFLAGS"
+   GNOME_SHELL_LIBS="$GNOME_SHELL_LIBS $NETWORKMANAGER_LIBS"
+else
+   have_networkmanager="no  (disabled)"
+fi
+
+if test "x$have_networkmanager" = "xyes"; then
+   AC_DEFINE(HAVE_NETWORKMANAGER, [1], [Define if we have NetworkManager])
+   AC_SUBST([HAVE_NETWORKMANAGER], [1])
+else
+   if test "x$enable_networkmanager" = "xyes"; then
+      AC_MSG_ERROR([Couldn't find NetworkManager.])
+   fi
+   AC_SUBST([HAVE_NETWORKMANAGER], [0])
+fi
+
+AM_CONDITIONAL(HAVE_NETWORKMANAGER, test "$have_networkmanager" = "yes")
+
 # Sets GLIB_GENMARSHAL and GLIB_MKENUMS
 AM_PATH_GLIB_2_0()
 
@@ -203,3 +232,15 @@
   man/Makefile
 ])
 AC_OUTPUT
+
+echo "
+Build configuration:
+
+       Prefix:                                 ${prefix}
+       Source code location:                   ${srcdir}
+       Compiler:                               ${CC}
+       Compiler Warnings:                      $enable_compile_warnings
+
+       Support for NetworkManager:             $have_networkmanager
+       Support for GStreamer recording:        $build_recorder
+"
